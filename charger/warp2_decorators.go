package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateWarp2(base *Warp2, meter func() (float64, error), meterEnergy func() (float64, error), meterCurrent func() (float64, float64, float64, error), identifier func() (string, error)) api.Charger {
	switch {
	case identifier == nil && meter == nil && meterCurrent == nil && meterEnergy == nil:
		return base

	case identifier == nil && meter != nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Meter
		}{
			Warp2: base,
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
		}

	case identifier == nil && meter == nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.MeterEnergy
		}{
			Warp2: base,
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier == nil && meter != nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Meter
			api.MeterEnergy
		}{
			Warp2: base,
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier == nil && meter == nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.MeterCurrent
		}{
			Warp2: base,
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case identifier == nil && meter != nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Meter
			api.MeterCurrent
		}{
			Warp2: base,
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case identifier == nil && meter == nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.MeterCurrent
			api.MeterEnergy
		}{
			Warp2: base,
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier == nil && meter != nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
		}{
			Warp2: base,
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier != nil && meter == nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Identifier
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
		}

	case identifier != nil && meter != nil && meterCurrent == nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Identifier
			api.Meter
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
		}

	case identifier != nil && meter == nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Identifier
			api.MeterEnergy
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier != nil && meter != nil && meterCurrent == nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Identifier
			api.Meter
			api.MeterEnergy
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier != nil && meter == nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Identifier
			api.MeterCurrent
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case identifier != nil && meter != nil && meterCurrent != nil && meterEnergy == nil:
		return &struct {
			*Warp2
			api.Identifier
			api.Meter
			api.MeterCurrent
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
		}

	case identifier != nil && meter == nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Identifier
			api.MeterCurrent
			api.MeterEnergy
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}

	case identifier != nil && meter != nil && meterCurrent != nil && meterEnergy != nil:
		return &struct {
			*Warp2
			api.Identifier
			api.Meter
			api.MeterCurrent
			api.MeterEnergy
		}{
			Warp2: base,
			Identifier: &decorateWarp2IdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateWarp2MeterImpl{
				meter: meter,
			},
			MeterCurrent: &decorateWarp2MeterCurrentImpl{
				meterCurrent: meterCurrent,
			},
			MeterEnergy: &decorateWarp2MeterEnergyImpl{
				meterEnergy: meterEnergy,
			},
		}
	}

	return nil
}

type decorateWarp2IdentifierImpl struct {
	identifier func() (string, error)
}

func (impl *decorateWarp2IdentifierImpl) Identify() (string, error) {
	return impl.identifier()
}

type decorateWarp2MeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateWarp2MeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateWarp2MeterCurrentImpl struct {
	meterCurrent func() (float64, float64, float64, error)
}

func (impl *decorateWarp2MeterCurrentImpl) Currents() (float64, float64, float64, error) {
	return impl.meterCurrent()
}

type decorateWarp2MeterEnergyImpl struct {
	meterEnergy func() (float64, error)
}

func (impl *decorateWarp2MeterEnergyImpl) TotalEnergy() (float64, error) {
	return impl.meterEnergy()
}
